import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.lines as mlines
# color map 
import matplotlib.cm as cm
import sys


def plot_embedding(df, ax1, ax2, fontsize=8):
    df = df[df["fold"] == 3]
    sns.scatterplot(data=df, x="Projected Dimension 1", y="Projected Dimension 2", hue="vae-predict", hue_order = ["non-mpHFO","mpHFO","mArtifact"], ax=ax1, s= 2 ,legend=True,alpha=0.1)
    sns.scatterplot(data=df, x="Projected Dimension 1", y="Projected Dimension 2", hue="spk-HFO", hue_order =["spkHFO","non-spkHFO","Artifact"],  ax=ax2,s =2 ,legend=True,alpha=0.1)
    ax1.set_title("VAE Discovery", fontsize=fontsize)
    ax2.set_title("Conventional HFO Classification", fontsize=fontsize)
    ax1.set_xlabel("")
    ax1.set_ylabel("")
    ax2.set_xlabel("")
    ax2.set_ylabel("")
    # remove ticks
    ax1.set_xticks([])
    ax1.set_yticks([])
    ax2.set_xticks([])
    ax2.set_yticks([])
   
    labels_new = ["non-mpHFO", "mpHFO", "mArtifact"]
    handles = []
    for l in labels_new:
        color = plt.get_cmap('tab10')(labels_new.index(l))
        legend_handle = mlines.Line2D([], [], color=color, marker='o', linestyle='None', markersize=2,label=f"{l}", alpha=1)
        handles.append(legend_handle)
    ax1.legend(handles=[handles[1], handles[0], handles[2]], labels=[labels_new[1], labels_new[0], labels_new[2]], title="", loc="lower left", fontsize=fontsize)
    # change legend into non-spkHFO, spkHFO, Artifact
    labels_new = ["non-spkHFO", "spkHFO", "Artifact"]
    handles = []
    for l in labels_new:
        color = plt.get_cmap('tab10')(labels_new.index(l))
        legend_handle = mlines.Line2D([], [], color=color, marker='o', linestyle='None', markersize=2,label=f"{l}", alpha=1)
        handles.append(legend_handle)
    ax2.legend(handles=[handles[1], handles[0], handles[2]], labels=[labels_new[1], labels_new[0], labels_new[2]], title="", loc="lower left", fontsize=fontsize)
    ax1.axis('off')
    ax2.axis('off')
    # make it square
    ax1.set_aspect('equal')
    ax2.set_aspect('equal')


    
def plot_distribution(ax, fontsize=8):

    def draw_vertical_bracket(ax, x, y1, y2, h, p_value):
        if p_value < 0.001:
            text = "***"
        elif p_value < 0.01:
            text = "**"
        elif p_value < 0.05:
            text = "*"
        else:
            text = f"p={p_value:.2f}"
        """Draws a vertical bracket between two points."""
        ax.plot([x, x + h, x + h, x], [y1, y1, y2, y2], lw=1, c='black')
        ax.text(x + h +0.1, (y1 + y2) / 2, text, ha='left', va='center', fontsize=fontsize)

    df = pd.read_csv(f'./res/{date}/df_soz.csv') # this file is generated by ./calculate_rate.py
    # change detroit0 in info to detroit2
    df.loc[df["info"] == "detroit0", "info"] = "detroit2"
    df.loc[df["info"] == "ucla0", "info"] = "ucla2"
    df.loc[df["info"] == "seeg0", "info"] = "seeg2"

    sns.boxplot(data=df, x="rate", y = "info", hue="name", ax=ax, fliersize = 3, linewidth=0.8, hue_order=["non_mpHFO","mpHFO"], showfliers=False)
    ax.tick_params(axis='x', labelsize=fontsize)
    ax.set_xlabel("HFO Rate (count/ch/min)", fontsize=fontsize)
    # y ticks fontsize is 8
    ax.tick_params(axis='y', labelsize=fontsize)
    # soz non-soz , soz non-soz, soz non-soz
    ax.set_yticklabels(["Non-SOZ", "SOZ", "Non-SOZ", "SOZ", "Non-SOZ", "SOZ"], fontsize=fontsize)
    # draw vertical line
    ax.axhline(y=1.5, color="black", linestyle="--", linewidth=0.8)
    ax.axhline(y=3.5, color="black", linestyle="--", linewidth=0.8)
    # add text UCLA Grid&Strip and Detroit Grid&Strip and UCLA SEEG after the hline
    offset = 0.1
    ax.text(0.85, 1.01 - offset, "Detroit grid/strip", horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=fontsize)
    ax.text(0.85, 0.7- offset, "UCLA SEEG", horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=fontsize)
    ax.text(0.85, 0.36- offset, "UCLA grid/strip", horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, fontsize=fontsize)
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles=handles[1:], labels=labels[1:], title="", fontsize=fontsize)
    labels_new = ["non-mpHFO", "mpHFO"]
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles=handles, labels=labels_new, title="", fontsize=fontsize, loc = "upper right")
    # move the legend down a bit
    ax.legend(handles=handles, labels=labels_new, title="", fontsize=fontsize, loc = "upper right", bbox_to_anchor=(1.0, 0.87), bbox_transform=ax.transAxes)
    # remove legend title
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles=handles[1:], labels=labels[1:], title="", loc="upper right", fontsize=fontsize)
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles=handles[::-1], labels=labels_new[::-1], title="", loc="lower right", fontsize=fontsize, markerscale=0.3)
    # remove y label
    ax.set_ylabel("")
    # move x ticks to the top
    ax.xaxis.tick_top()
    # move x label to the top 
    ax.xaxis.set_label_position('top')
    # move x ticks closer to the plot
    ax.tick_params(axis='x', which='major', pad=0.1)
    ax.set_xlim([-0.2, 8])
    # add p value for detroit
    from scipy.stats import ttest_ind
    d_n_soz_mp = df[(df["info"] == "detroit2") & (df["name"] == "mpHFO")]["rate"].values
    d_n_soz_nmp = df[(df["info"] == "detroit2") & (df["name"] == "non_mpHFO")]["rate"].values
    d_soz_mp = df[(df["info"] == "detroit1") & (df["name"] == "mpHFO")]["rate"].values
    d_soz_nmp = df[(df["info"] == "detroit1") & (df["name"] == "non_mpHFO")]["rate"].values
    
    p_val_detroit = ttest_ind(d_n_soz_mp, d_n_soz_nmp, alternative="two-sided")[1]
    p_val_detroit_soz = ttest_ind(d_soz_mp, d_soz_nmp, alternative="greater")[1]
    # add p value for ucla
    u_n_soz_mp = df[(df["info"] == "ucla2") & (df["name"] == "mpHFO")]["rate"].values
    u_n_soz_nmp = df[(df["info"] == "ucla2") & (df["name"] == "non_mpHFO")]["rate"].values
    u_soz_mp = df[(df["info"] == "ucla1") & (df["name"] == "mpHFO")]["rate"].values
    u_soz_nmp = df[(df["info"] == "ucla1") & (df["name"] == "non_mpHFO")]["rate"].values
    p_val_ucla = ttest_ind(u_n_soz_mp, u_n_soz_nmp, alternative="two-sided")[1]
    p_val_ucla_soz = ttest_ind(u_soz_mp, u_soz_nmp, alternative="greater")[1]
    # add p value for seeg
    s_n_soz_mp = df[(df["info"] == "seeg2") & (df["name"] == "mpHFO")]["rate"].values
    s_n_soz_nmp = df[(df["info"] == "seeg2") & (df["name"] == "non_mpHFO")]["rate"].values
    s_soz_mp = df[(df["info"] == "seeg1") & (df["name"] == "mpHFO")]["rate"].values
    s_soz_nmp = df[(df["info"] == "seeg1") & (df["name"] == "non_mpHFO")]["rate"].values
    p_val_seeg = ttest_ind(s_n_soz_mp, s_n_soz_nmp, alternative="two-sided")[1]
    p_val_seeg_soz = ttest_ind(s_soz_mp, s_soz_nmp, alternative="greater")[1]
    
    draw_vertical_bracket(ax, 3.5, -0.3, 0.3, 0.1, p_value=p_val_detroit)
    draw_vertical_bracket(ax, 6.5, 0.7, 1.3, 0.1, p_value=p_val_detroit_soz)
    draw_vertical_bracket(ax, 4.6, 1.7, 2.3, 0.1, p_value=p_val_seeg)
    draw_vertical_bracket(ax, 4.6, 2.7, 3.3, 0.1, p_value=p_val_seeg_soz)
    draw_vertical_bracket(ax, 3.6, 3.7, 4.3, 0.1, p_value=p_val_ucla)
    draw_vertical_bracket(ax, 3.6, 4.7, 5.3, 0.1, p_value=p_val_ucla_soz)

    ax.tick_params(axis='both', which='major', labelsize=fontsize, pad=0.1)
  

def plot_ttest(ax1, ax2):
    fn = "./t_test.npy" # this file is generated by fig_code/ttest_all.py
    data = np.load(fn)
    ax1.imshow(data[40])
    d_mean = np.mean(data, axis=0)
    cax = ax2.imshow(d_mean)
    # draw a mask for d_mean > 0.5
    rgba_image = np.zeros((*d_mean.shape, 4), dtype=np.uint8)
    rgba_image[d_mean > 0.5, 0] = 255  # Red channel
    rgba_image[d_mean > 0.5, 3] = 120   # Alpha channel (adjust transparency as needed)
    # when mask is 1, the color is red else is transparent
    ax2.imshow(rgba_image, label="p<0.05")
    # add a legend to the ax2 
    ax2.legend(handles=[mlines.Line2D([], [], color='red', marker='s', linestyle='None', markersize=5,label=">0.5", alpha=125/255)], title="", loc="upper right", fontsize=6)
    ax1.set_xticks(np.linspace(0, 63, 5))
    ax1.set_xticklabels(np.linspace(-285, 285, 5).astype(int), fontsize=6)
    ax1.set_yticks(np.linspace(0, 63, 5))
    ax1.set_yticklabels(np.linspace(290, 10, 5).astype(int), fontsize=6)
    ax2.set_xticks(np.linspace(0, 63, 5))
    ax2.set_xticklabels(np.linspace(-285, 285, 5).astype(int), fontsize=6)
    
    ax2.set_yticks([])
    ax1.set_xlabel("Time (ms)", fontsize= 6, labelpad=0.1)
    ax1.set_ylabel("Frequency (Hz)", fontsize= 6, labelpad=0.1)
    ax2.set_xlabel("Time (ms)", fontsize= 6, labelpad=0.1)
    ax1.set_title("Example Subject", fontsize= 6)
    ax2.set_title("Overall Subjects", fontsize= 6)
    # colorbar
    cbar = plt.colorbar(cax, ax=[ax1, ax2], shrink=0.7, pad=0.01)
    cbar.ax.tick_params(labelsize=6, pad=0.1)
    ax1.tick_params(axis='both', which='major', labelsize=fontsize, pad=0.1)
    ax2.tick_params(axis='both', which='major', labelsize=fontsize, pad=0.1)
    # draw a horizontal dashed line at 80Hz
    # calculate y index for 80Hz 10-290Hz, 0-63 index,
    y_index = 63 - (80-10)/5
    ax1.axhline(y=y_index, color="red", linestyle="--", linewidth=2)
    ax2.axhline(y=y_index, color="red", linestyle="--", linewidth=2)
    # annotate HFO band on the top of the 80Hz line
    ax1.text(0.01, 0.28, "HFO band", horizontalalignment='left', verticalalignment='center', transform=ax1.transAxes, fontsize=6, weight='bold', color="red")
    # annotate sub HFO band on the bottom of the 80Hz line
    ax1.text(0.01, 0.18, "Sub-HFO band", horizontalalignment='left', verticalalignment='center', transform=ax1.transAxes, fontsize=6, weight='bold', color="red")

def plot_trace(axs, fontsize=6, mode = 1):
    ax1, ax2, ax3 = axs
    def plot_func(data, ax, m =1):

        ax.plot(np.arange(mid-window, mid+window),data[int(mid-window):int(mid+window)], label="EEG", linewidth=0.5)
        ax.plot(np.arange(int(start), int(end)), data[int(start):int(end)], color="red", label="HFO", linewidth=0.5)
        ax.set_xticks(np.linspace(mid-window, mid+window, 5))
        ax.set_xticklabels(np.round(np.linspace(-window, +window, 5)).astype(int), fontsize=fontsize)
        if m == 1:
            ax.set_ylim([-4, 3.5])
        else:
            ax.set_ylim([-4, 3.5])
        # ax grid
        ax.legend(fontsize=fontsize, loc="upper left")
        ax.tick_params(axis='both', which='major', labelsize=fontsize, pad=0.1)
        ax.grid()
        ax.set_aspect('auto')


    def plot_tf(tf_plot, ax):
        ax.imshow(tf_plot, origin='lower')
        ax.set_xticks(np.linspace(0, 63, 5))
        ax.set_xticklabels(np.round(np.linspace(-window, +window, 5)).astype(int), fontsize=fontsize)
        # set yticks fontsize to 6
        ax.set_yticklabels(np.linspace(290, 10, 5).astype(int)[::-1], fontsize=fontsize)
        ax.set_yticks(np.linspace(0, 63, 5))
        ax.tick_params(axis='both', which='major', labelsize=fontsize, pad=0.1)

    if mode == 1:
        loaded = np.load("./draw/POL FP55_646495_646540.npz")
    else:
        loaded = np.load("./draw/POL G2_776389_776448.npz")
    data = loaded["data"]
    filtered = loaded["filtered"]
    start = loaded["start"]
    end = loaded["end"]
    tf_out = loaded["tf_out"]
    mid = (start + end)/2
    window = 285
    plot_func(data, ax2)
    plot_func(filtered, ax3, m=2)
    plot_tf(tf_out, ax1)
    #ax1.set_ylabel("Voltage (mV)", fontsize=fontsize)
    ax1.set_xlabel("Time (ms)", fontsize=fontsize, labelpad=0.1)
    if mode == 1:
        # add text on the left of y axisticks allign with the center of y axisticks, 
        ax1.text(-0.6, 0.5, "mpHFO \n example", horizontalalignment='center', verticalalignment='center', transform=ax1.transAxes, fontsize=fontsize, rotation=90, weight='bold')
        ax1.set_ylabel(f"Frequency (Hz)", fontsize=fontsize, labelpad=0.1)
    else:
        ax1.text(-0.6, 0.5, "non-mpHFO \n example", horizontalalignment='center', verticalalignment='center', transform=ax1.transAxes, fontsize=fontsize, rotation=90, weight='bold')
        ax1.set_ylabel(f"Frequency (Hz)", fontsize=fontsize, labelpad=0.1)
    ax1.set_title("Time-Frequency Plot", fontsize=fontsize)
    ax2.set_xlabel("Time (ms)", fontsize=fontsize, labelpad=0.1)
    ax2.set_title("HFO EEG Tracing", fontsize=fontsize)
    # set text mV to the top position of y axisticks
    ax2.text(-0.1, 1.1, "mV", horizontalalignment='center', verticalalignment='center', transform=ax2.transAxes, fontsize=fontsize)
    ax3.set_xlabel("Time (ms)", fontsize=fontsize, labelpad=0.1)
    ax3.set_title("EEG after bandpass 10~80Hz", fontsize=fontsize)
    # set text mV to the top position of y axisticks
    ax3.text(-0.1, 1.1, "mV", horizontalalignment='center', verticalalignment='center', transform=ax3.transAxes, fontsize=fontsize)
  

def plot_fft(ax1, ax2):

    def draw(ax, freq, mean, std, color, label):
        ax.plot(freq, mean, label=label, linewidth=1.5, color=color)
        ax.fill_between(freq, mean - std, mean + std, alpha=0.5, color=color)
        ax.set_xlabel("Frequency (Hz)", fontsize=6)
        ax.set_ylabel("Ratio", fontsize=6)
        ax.set_xlim([0, 320])
        # set xticks 0,40,80,120,160,200,240,280,320
        ax.set_xticks(np.linspace(0, 320, 9))
        ax.set_xticklabels(np.linspace(0, 320, 9).astype(int), fontsize=6)
        #ax.legend(fontsize=6)
        ax.tick_params(axis='both', which='major', labelsize=6, pad=0.1)
        # ylog 
        ax.set_yscale("symlog")
        # draw horizontal dashed line for 0
        ax.axhline(y=0, color="black", linestyle="--", linewidth=1)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        ax.set_title("(mpHFO - non-mpHFO)/non-mpHFO", fontsize=6, pad=0)
        # plot a vertical line at the max of the ratio and annotate it
        max_index = np.argmax(mean)
        ax.axvline(x=freq[max_index], color="red", linestyle="--", linewidth=2, alpha=0.5)
        ax.text(freq[max_index], mean[max_index], f"  {freq[max_index]:.2f}Hz", fontsize=6, ha='left', va='bottom')
        # draw a vertical line at 80Hz
        ax.axvline(x=80, color="black", linestyle="--", linewidth=1)
        
    
    def draw_single(ax, freq, mean, std, mean1, std1):
        ax.plot(freq, mean1, linewidth=1.5, label="non-mpHFO")
        ax.fill_between(freq, mean1 - std1, mean1 + std1, alpha=0.5)
        ax.plot(freq, mean, linewidth=1.5, label="mpHFO")
        ax.fill_between(freq, mean - std, mean + std, alpha=0.5)
        ax.set_xlabel("Frequency (Hz)", fontsize=6)
        ax.set_ylabel("FFT Amplitude", fontsize=6)
        ax.set_xlim([0, 320])
        # set xticks 0,40,80,120,160,200,240,280,320
        ax.set_xticks(np.linspace(0, 320, 9))
        ax.set_xticklabels(np.linspace(0, 320, 9).astype(int), fontsize=6)
        ax.legend(fontsize=6)
        ax.tick_params(axis='both', which='major', labelsize=6, pad=0.1)
        # ylog 
        ax.set_yscale("log")
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        ax.set_title("FFT of mpHFO and non-mpHFO", fontsize=6, pad=0)
        # flipt the order of legend
        handles, labels = ax.get_legend_handles_labels()
        ax.legend(handles[::-1], labels[::-1], fontsize=6)
        ax.axvline(x=80, color="black", linestyle="--", linewidth=1)

    loaded = np.load("draw/fft.npz")
    phy_ffts = loaded["final_noral"]
    patho_ffts = loaded["final_patho"]
    pt_names = loaded["pt_names"]
    phy_std = loaded["final_std_noral"]
    patho_std = loaded["final_std_patho"]
    ratio = (patho_ffts - phy_ffts )/ phy_ffts
    ratio_mean = np.mean(ratio, axis=0)
    ratio_std = np.std(ratio, axis=0)
    pt_index = pt_names.tolist().index("M16014")
    patho_ffts_single = patho_ffts[pt_index]
    phy_ffts_single = phy_ffts[pt_index]
    patho_std_single = patho_std[pt_index]
    phy_std_single = phy_std[pt_index]
    freq = loaded["freq"]
    pt_names = loaded["pt_names"]
    draw_single(ax1, freq, patho_ffts_single, patho_std_single, phy_ffts_single, phy_std_single)
    draw(ax2, freq, ratio_mean, ratio_std , "teal", "Ratio")
    ax1.set_xlabel("")
    ax1.set_xticklabels([])
    ax1.set_xticks([])
    
if __name__ == "__main__":
    date = sys.argv[1]
    suffix = sys.argv[2]
    df = pd.read_csv(f'./res/{date}/{suffix}/embedding_save.csv')
    cm = 1/2.54 
    fontsize = 6
    fig = plt.figure(figsize=(17*cm, 16.5*cm), constrained_layout=True)
    # two rows, 1 column
    subfigs = fig.subfigures(3, 1, height_ratios=[1.5,1.5,2], hspace=0)
    # first row
    # second row
    subsubfigs = [subfigs[0],subfigs[1]]
    gs = subsubfigs[0].subfigures(1, 3, width_ratios=[0.9, 0.9, 1.6], wspace=0)
    ax1 = gs[0].subplots()
    ax2 = gs[1].subplots()
    ax3 = gs[2].subplots()
    low_subgigures = subsubfigs[1].subfigures(1,2, width_ratios=[1, 1*0.85], wspace=0)
    low_left = low_subgigures[0].subplots(1,2)
    low_right = low_subgigures[1].subplots(2,1)
    ax4 = low_left[0]
    ax5 = low_left[1]
    ax6 = low_right[0]
    ax7 = low_right[1]
    # ax4 align with ax1 are at the same location
    plot_embedding(df, ax1, ax2, fontsize=fontsize)
    plot_distribution(ax3, fontsize=fontsize)
    plot_ttest(ax4, ax5)
    #plot_trace(ax6, ax7)
    plot_fft(ax6,ax7)
    
    subsubfigs = subfigs[2].subfigures(2, 1, height_ratios=[1, 1], hspace=0)
    ax_list = []
    for i in range(2):
        sub_f = subsubfigs[i].subfigures(1, 3, width_ratios=[1.5,1.6, 1.6])
        aa = []
        for j in range(3):
            if i == 1:
                aa.append(sub_f[j].subplots(1,1))
            else:
                aa.append(sub_f[j].subplots(1,1))
        ax_list.append(aa)
    plot_trace(ax_list[0], fontsize=fontsize, mode=1)
    plot_trace(ax_list[1], fontsize=fontsize, mode=2)    
    
    # ax_list[0] share the same x axis as ax_list[1]
    for i in range(3):
        ax_list[0][i].set_xlabel("", fontsize=fontsize)
        ax_list[1][i].set_title("", fontsize=fontsize)
        #ax_list[0][i].set_xticklabels([])
    ax_list[1][0].set_title(" ", fontsize=fontsize, pad=0)
    # add abcdef for each axs
    letters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]
    fig.text(0.01, 0.98, "a", ha='center', fontsize=fontsize+2, weight='bold')
    fig.text(0.26, 0.98, "b", ha='center', fontsize=fontsize+2, weight='bold')
    fig.text(0.55, 0.98, "c", ha='center', fontsize=fontsize+2, weight='bold')
    fig.text(0.01, 0.68, "d", ha='center', fontsize=fontsize+2, weight='bold')
    fig.text(0.26, 0.68, "e", ha='center', fontsize=fontsize+2, weight='bold')
    fig.text(0.55, 0.68, "f", ha='center', fontsize=fontsize+2, weight='bold')
    fig.text(0.55, 0.55, "g", ha='center', fontsize=fontsize+2, weight='bold')
    
    fig.text(0.05, 0.38, "h", ha='center', fontsize=fontsize+2, weight='bold')
    fig.text(0.32, 0.38, "i", ha='center', fontsize=fontsize+2, weight='bold')
    fig.text(0.66, 0.38, "j", ha='center', fontsize=fontsize+2, weight='bold')
    
    fig.text(0.05, 0.18, "k", ha='center', fontsize=fontsize+2, weight='bold')
    fig.text(0.32, 0.18, "l", ha='center', fontsize=fontsize+2, weight='bold')
    fig.text(0.66, 0.18, "m", ha='center', fontsize=fontsize+2, weight='bold')

    # fig.subplots_adjust(hspace=0.1) 
    plt.savefig(f"./fig/{date}_figure2.jpg", dpi=300, bbox_inches='tight')